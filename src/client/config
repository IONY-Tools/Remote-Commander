import colorama
import sys
import os
import sqlite3
import string as letters
import random
import base64
from colorama import Fore, Back
from utils.database import DBConnection

database = sqlite3.connect("databases\Remote-Commander.db")

commands = {
    "rc:user:create": {
        "callback": "create_user()",
        "description": "Creates a New User."
    },
    "rc:user:delete": {
        "callback": "delete_user()",
        "description": "Deletes a user."
    },
    "rc:device:create": {
        "callback": "create_device()",
        "description": "Creates a New Device."
    },
    "db:migrate": {
        "callback": "migrate_db()",
        "description": "Drops all tables and recreates them."
    }
}

def gen_session(username):
    chars = letters.ascii_lowercase+letters.ascii_uppercase+letters.digits
    part1 = base64.b64encode(username.encode("utf-8"))
    string = ""
    for i in range(50):
        string += random.choice(chars)
    part2 = base64.b64encode(string.encode("utf-8"))
    string = ""
    for i in range(25):
        string += random.choice(chars)
    part3 = base64.b64encode(string.encode("utf-8"))
    return (part1.decode("utf-8") + "." + part2.decode("utf-8") + "." + part3.decode("utf-8")).replace("=", "")

def gen_uuid():
    uuid = ""
    chars = letters.ascii_lowercase+letters.ascii_uppercase+letters.digits
    for i in range(8):
        uuid += random.choice(chars)
    uuid += "-"
    for i in range(24):
        uuid += random.choice(chars)
    uuid += "-"
    for i in range(12):
        uuid += random.choice(chars)
    return uuid

def info(msg):
    print(Back.CYAN+Fore.WHITE+" INFO "+Fore.RESET+Back.RESET+" "+msg) 

def warning(msg):
    print(Back.YELLOW+Fore.WHITE+" WARNING "+Fore.RESET+Back.RESET+" "+msg) 

def error(msg):
    print(Back.RED+Fore.WHITE+" ERROR "+Fore.RESET+Back.RESET+" "+msg) 

def prompt(msg, default: str = None) -> str:
    endpart = Fore.WHITE+":"
    if default != None:
        endpart = Fore.WHITE+" ["+Fore.YELLOW+f"{default}"+Fore.WHITE+"]:"
    print(Fore.GREEN+msg+Fore.WHITE+endpart)
    result = input("> ")
    if result == "":
        if default == None:
            error("Fail!")
            return
        else: 
            result = default
    
    return result

def create_user():
    first_name = prompt("First Name", "Default")
    print("\n")
    last_name = prompt("Last Name", "User")
    print("\n")
    username = prompt("Username")
    print("\n")
    password = prompt("Password")
    print("\n")
    email = prompt("Email", "email@example.com")
    print("\n")
    admin = prompt("Administrator", "N")
    id = random.randint(1,999999)
    if admin == "Y":
        admin = True
    else:
        admin = False
    database.cursor().execute(f"INSERT INTO users VALUES ('{gen_uuid()}', '{username}', '{email}', '{first_name}', '{last_name}', '{id}', '{password}', '{admin}', '{gen_session(username)}')")
    database.commit()
    info("Successfully created a new user.")

def parse():
    args = sys.argv[1:]
    if len(args) == 0:
        categories = []
        for i in commands:
            name = i.split(":")[0]
            if name not in categories:
                categories.append(name)
        for i in categories:
            print(Fore.GREEN+i)
            for j in commands:
                if j.startswith(i):
                    print(Fore.YELLOW + "   " + j + " - " + commands[j]["description"] + Fore.RESET)
            print("\n")

    else:
        try:
            eval(commands[args[0]]["callback"])
        except Exception as e:
            print(e)
            error("Command not found.")

def migrate_db():
    sql = "select 'drop table ' || name || ';' from sqlite_master where type = 'table'"
    database.cursor().execute(sql)
    database.commit()
    for file in os.listdir("./migrations"):
        if file.endswith("database-migration"):
            try:
                database.cursor().execute(open("./migrations/"+file, "r").read())
                database.commit()
                info("Migrated " + file)
            except:
                warning("Migration " + file + " already exists.")
    info("Successfully migrated the DB.")

def create_device():
    ip = prompt("IP Address")
    print("\n")
    port = int(prompt("Port", 5678))
    print("\n")
    nickname = prompt("Nickname", ip)
    print("\n")
    secret = prompt("Secret")
    database.cursor().execute(f"INSERT INTO devices VALUES ('{gen_uuid()}', '{ip}', '{port}', '{nickname}', '{secret}')")
    database.commit()
    info("Created a New Device.")
parse()